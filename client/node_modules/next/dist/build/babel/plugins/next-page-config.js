"use strict";exports.__esModule=true;exports.default=nextPageConfig;var BabelTypes=_interopRequireWildcard(require("@babel/types"));function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}const STRING_LITERAL_DROP_BUNDLE='__NEXT_DROP_CLIENT_FILE__';// replace program path with just a variable with the drop identifier
function replaceBundle(path,t){path.parentPath.replaceWith(t.program([t.variableDeclaration('const',[t.variableDeclarator(t.identifier('config'),t.assignmentExpression('=',t.identifier(STRING_LITERAL_DROP_BUNDLE),t.stringLiteral(`${STRING_LITERAL_DROP_BUNDLE} ${Date.now()}`)))])],[]));}function errorMessage(state,details){const pageName=(state.filename||'').split(state.cwd||'').pop()||'unknown';return`Invalid page config export found. ${details} in file ${pageName}. See: https://err.sh/zeit/next.js/invalid-page-config`;}// config to parsing pageConfig for client bundles
function nextPageConfig({types:t}){return{visitor:{Program:{enter(path,state){path.traverse({ExportNamedDeclaration(path,state){if(state.bundleDropped||!path.node.declaration){return;}if(!BabelTypes.isVariableDeclaration(path.node.declaration)){return;}const{declarations}=path.node.declaration;const config={};for(const declaration of declarations){if(!BabelTypes.isIdentifier(declaration.id,{name:'config'})){continue;}if(!BabelTypes.isObjectExpression(declaration.init)){const got=declaration.init?declaration.init.type:'undefined';throw new Error(errorMessage(state,`Expected object but got ${got}`));}for(const prop of declaration.init.properties){if(BabelTypes.isSpreadElement(prop)){throw new Error(errorMessage(state,`Property spread is not allowed`));}const{name}=prop.key;if(BabelTypes.isIdentifier(prop.key,{name:'amp'})){if(!BabelTypes.isObjectProperty(prop)){throw new Error(errorMessage(state,`Invalid property "${name}"`));}if(!BabelTypes.isBooleanLiteral(prop.value)&&!BabelTypes.isStringLiteral(prop.value)){throw new Error(errorMessage(state,`Invalid value for "${name}"`));}config.amp=prop.value.value;}}}if(config.amp===true){var _state$file,_state$file$opts;if(!((_state$file=state.file)===null||_state$file===void 0?void 0:(_state$file$opts=_state$file.opts)===null||_state$file$opts===void 0?void 0:_state$file$opts.caller.isDev)){// don't replace bundle in development so HMR can track
// dependencies and trigger reload when they are changed
replaceBundle(path,t);}state.bundleDropped=true;return;}}},state);}}}};}