{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst url_1 = require(\"url\");\n\nconst mitt_1 = __importDefault(require(\"../mitt\"));\n\nconst utils_1 = require(\"../utils\");\n\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\n\nconst route_matcher_1 = require(\"./utils/route-matcher\");\n\nconst route_regex_1 = require(\"./utils/route-regex\");\n\nconst basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\n\nfunction addBasePath(path) {\n  return path.indexOf(basePath) !== 0 ? basePath + path : path;\n}\n\nexports.addBasePath = addBasePath;\n\nfunction delBasePath(path) {\n  return path.indexOf(basePath) === 0 ? path.substr(basePath.length) || '/' : path;\n}\n\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}\n\nconst prepareRoute = path => toRoute(!path || path === '/' ? '/index' : path);\n\nfunction fetchNextData(pathname, query, isServerRender, cb) {\n  let attempts = isServerRender ? 3 : 1;\n\n  function getResponse() {\n    return fetch(utils_1.formatWithValidation({\n      // @ts-ignore __NEXT_DATA__\n      pathname: `/_next/data/${__NEXT_DATA__.buildId}${pathname}.json`,\n      query\n    }), {\n      // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n      // Cookies may also be required for `getServerSideProps`.\n      //\n      // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n      // > option.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n      //\n      // > For maximum browser compatibility when it comes to sending &\n      // > receiving cookies, always supply the `credentials: 'same-origin'`\n      // > option instead of relying on the default.\n      // https://github.com/github/fetch#caveats\n      credentials: 'same-origin'\n    }).then(res => {\n      if (!res.ok) {\n        if (--attempts > 0 && res.status >= 500) {\n          return getResponse();\n        }\n\n        throw new Error(`Failed to load static props`);\n      }\n\n      return res.json();\n    });\n  }\n\n  return getResponse().then(data => {\n    return cb ? cb(data) : data;\n  }).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      ;\n      err.code = 'PAGE_LOAD_ERROR';\n    }\n\n    throw err;\n  });\n}\n\nclass Router {\n  constructor(pathname, query, as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription,\n    isFallback\n  }) {\n    // Static Data Cache\n    this.sdc = {};\n\n    this.onPopState = e => {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', utils_1.formatWithValidation({\n          pathname,\n          query\n        }), utils_1.getURL());\n        return;\n      } // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n\n      if (e.state && this.isSsr && e.state.as === this.asPath && url_1.parse(e.state.url).pathname === this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(e.state)) {\n        return;\n      }\n\n      const {\n        url,\n        as,\n        options\n      } = e.state;\n\n      if (true) {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n        }\n      }\n\n      this.replace(url, as, options);\n    };\n\n    this._getStaticData = asPath => {\n      const pathname = prepareRoute(url_1.parse(asPath).pathname);\n      return false && this.sdc[pathname] ? Promise.resolve(this.sdc[pathname]) : fetchNextData(pathname, null, this.isSsr, data => this.sdc[pathname] = data);\n    };\n\n    this._getServerData = asPath => {\n      let {\n        pathname,\n        query\n      } = url_1.parse(asPath, true);\n      pathname = prepareRoute(pathname);\n      return fetchNextData(pathname, query, this.isSsr);\n    }; // represents the current component key\n\n\n    this.route = toRoute(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    this.asPath = // @ts-ignore this is temporarily global (attached to window)\n    is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isFallback = isFallback;\n\n    if (false) {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', utils_1.formatWithValidation({\n        pathname,\n        query\n      }), as);\n      window.addEventListener('popstate', this.onPopState);\n    }\n  } // @deprecated backwards compatibility even though it's a private method.\n\n\n  static _rewriteUrlForNextExport(url) {\n    if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n      const rewriteUrlForNextExport = require('./rewrite-url-for-export').rewriteUrlForNextExport;\n\n      return rewriteUrlForNextExport(url);\n    } else {\n      return url;\n    }\n  }\n\n  update(route, mod) {\n    const Component = mod.default || mod;\n    const data = this.components[route];\n\n    if (!data) {\n      throw new Error(`Cannot update unavailable route: ${route}`);\n    }\n\n    const newData = Object.assign(Object.assign({}, data), {\n      Component,\n      __N_SSG: mod.__N_SSG,\n      __N_SSP: mod.__N_SSP\n    });\n    this.components[route] = newData; // pages/_app.js updated\n\n    if (route === '/_app') {\n      this.notify(this.components[this.route]);\n      return;\n    }\n\n    if (route === this.route) {\n      this.notify(newData);\n    }\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\n   * Go back in history\n   */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n\n\n  push(url, as = url, options = {}) {\n    return this.change('pushState', url, as, options);\n  }\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n\n\n  replace(url, as = url, options = {}) {\n    return this.change('replaceState', url, as, options);\n  }\n\n  change(method, _url, _as, options) {\n    return new Promise((resolve, reject) => {\n      if (!options._h) {\n        this.isSsr = false;\n      } // marking route changes as a navigation start entry\n\n\n      if (utils_1.ST) {\n        performance.mark('routeChange');\n      } // If url and as provided as an object representation,\n      // we'll format them into the string version here.\n\n\n      let url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n      let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n      url = addBasePath(url);\n      as = addBasePath(as); // Add the ending slash to the paths. So, we can serve the\n      // \"<page>/index.html\" directly for the SSR page.\n\n      if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n        const rewriteUrlForNextExport = require('./rewrite-url-for-export').rewriteUrlForNextExport; // @ts-ignore this is temporarily global (attached to window)\n\n\n        if (__NEXT_DATA__.nextExport) {\n          as = rewriteUrlForNextExport(as);\n        }\n      }\n\n      this.abortComponentLoad(as); // If the url change is only related to a hash change\n      // We should not proceed. We should only change the state.\n      // WARNING: `_h` is an internal option for handing Next.js client-side\n      // hydration. Your app should _never_ use this property. It may change at\n      // any time without notice.\n\n      if (!options._h && this.onlyAHashChange(as)) {\n        this.asPath = as;\n        Router.events.emit('hashChangeStart', as);\n        this.changeState(method, url, as, options);\n        this.scrollToHash(as);\n        Router.events.emit('hashChangeComplete', as);\n        return resolve(true);\n      }\n\n      const {\n        pathname,\n        query,\n        protocol\n      } = url_1.parse(url, true);\n\n      if (!pathname || protocol) {\n        if (true) {\n          throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n        }\n\n        return resolve(false);\n      } // If asked to change the current URL we should reload the current page\n      // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n      // We also need to set the method = replaceState always\n      // as this should not go into the history (That's how browsers work)\n      // We should compare the new asPath to the current asPath, not the url\n\n\n      if (!this.urlIsNew(as)) {\n        method = 'replaceState';\n      }\n\n      const route = toRoute(pathname);\n      const {\n        shallow = false\n      } = options;\n\n      if (is_dynamic_1.isDynamicRoute(route)) {\n        const {\n          pathname: asPathname\n        } = url_1.parse(as);\n        const routeRegex = route_regex_1.getRouteRegex(route);\n        const routeMatch = route_matcher_1.getRouteMatcher(routeRegex)(asPathname);\n\n        if (!routeMatch) {\n          const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n\n          if (missingParams.length > 0) {\n            if (true) {\n              console.warn(`Mismatching \\`as\\` and \\`href\\` failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n            }\n\n            return reject(new Error(`The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` + `Read more: https://err.sh/zeit/next.js/incompatible-href-as`));\n          }\n        } else {\n          // Merge params into `query`, overwriting any specified in search\n          Object.assign(query, routeMatch);\n        }\n      }\n\n      Router.events.emit('routeChangeStart', as); // If shallow is true and the route exists in the router cache we reuse the previous result\n\n      this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n        const {\n          error\n        } = routeInfo;\n\n        if (error && error.cancelled) {\n          return resolve(false);\n        }\n\n        Router.events.emit('beforeHistoryChange', as);\n        this.changeState(method, url, as, options);\n\n        if (true) {\n          const appComp = this.components['/_app'].Component;\n          window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n        }\n\n        this.set(route, pathname, query, as, routeInfo);\n\n        if (error) {\n          Router.events.emit('routeChangeError', error, as);\n          throw error;\n        }\n\n        Router.events.emit('routeChangeComplete', as);\n        return resolve(true);\n      }, reject);\n    });\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || utils_1.getURL() !== as) {\n      window.history[method]({\n        url,\n        as,\n        options\n      }, // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n\n  getRouteInfo(route, pathname, query, as, shallow = false) {\n    const cachedRouteInfo = this.components[route]; // If there is a shallow route transition possible\n    // If the route is already rendered on the screen.\n\n    if (shallow && cachedRouteInfo && this.route === route) {\n      return Promise.resolve(cachedRouteInfo);\n    }\n\n    const handleError = (err, loadErrorFail) => {\n      return new Promise(resolve => {\n        if (err.code === 'PAGE_LOAD_ERROR' || loadErrorFail) {\n          // If we can't load the page it could be one of following reasons\n          //  1. Page doesn't exists\n          //  2. Page does exist in a different zone\n          //  3. Internal error while loading the page\n          // So, doing a hard reload is the proper way to deal with this.\n          window.location.href = as; // Changing the URL doesn't block executing the current code path.\n          // So, we need to mark it as a cancelled error and stop the routing logic.\n\n          err.cancelled = true; // @ts-ignore TODO: fix the control flow here\n\n          return resolve({\n            error: err\n          });\n        }\n\n        if (err.cancelled) {\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({\n            error: err\n          });\n        }\n\n        resolve(this.fetchComponent('/_error').then(res => {\n          const {\n            page: Component\n          } = res;\n          const routeInfo = {\n            Component,\n            err\n          };\n          return new Promise(resolve => {\n            this.getInitialProps(Component, {\n              err,\n              pathname,\n              query\n            }).then(props => {\n              routeInfo.props = props;\n              routeInfo.error = err;\n              resolve(routeInfo);\n            }, gipErr => {\n              console.error('Error in error page `getInitialProps`: ', gipErr);\n              routeInfo.error = err;\n              routeInfo.props = {};\n              resolve(routeInfo);\n            });\n          });\n        }).catch(err => handleError(err, true)));\n      });\n    };\n\n    return new Promise((resolve, reject) => {\n      if (cachedRouteInfo) {\n        return resolve(cachedRouteInfo);\n      }\n\n      this.fetchComponent(route).then(res => resolve({\n        Component: res.page,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP\n      }), reject);\n    }).then(routeInfo => {\n      const {\n        Component,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo;\n\n      if (true) {\n        const {\n          isValidElementType\n        } = require('react-is');\n\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n\n      return this._getData(() => __N_SSG ? this._getStaticData(as) : __N_SSP ? this._getServerData(as) : this.getInitialProps(Component, // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as\n      })).then(props => {\n        routeInfo.props = props;\n        this.components[route] = routeInfo;\n        return routeInfo;\n      });\n    }).catch(handleError);\n  }\n\n  set(route, pathname, query, as, data) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.notify(data);\n  }\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value\n\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */\n\n\n  prefetch(url, asPath = url, options = {}) {\n    return new Promise((resolve, reject) => {\n      const {\n        pathname,\n        protocol\n      } = url_1.parse(url);\n\n      if (!pathname || protocol) {\n        if (true) {\n          throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n        }\n\n        return;\n      } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n\n      if (true) {\n        return;\n      }\n\n      const route = delBasePath(toRoute(pathname));\n      Promise.all([this.pageLoader.prefetchData(url, delBasePath(asPath)), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]).then(() => resolve(), reject);\n    });\n  }\n\n  async fetchComponent(route) {\n    let cancelled = false;\n\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n\n    route = delBasePath(route);\n    const componentResult = await this.pageLoader.loadPage(route);\n\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n\n    return componentResult;\n  }\n\n  _getData(fn) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n\n      return data;\n    });\n  }\n\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n\n    const AppTree = this._wrapApp(App);\n\n    ctx.AppTree = AppTree;\n    return utils_1.loadGetInitialProps(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n\n  abortComponentLoad(as) {\n    if (this.clc) {\n      const e = new Error('Route Cancelled');\n      e.cancelled = true;\n      Router.events.emit('routeChangeError', e, as);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  notify(data) {\n    this.sub(data, this.components['/_app'].Component);\n  }\n\n}\n\nexports.default = Router;\nRouter.events = mitt_1.default();","map":{"version":3,"sources":["/Users/makennasmutz/Documents/GitHub/webapp/node_modules/next/dist/next-server/lib/router/router.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","url_1","require","mitt_1","utils_1","is_dynamic_1","route_matcher_1","route_regex_1","basePath","process","env","__NEXT_ROUTER_BASEPATH","addBasePath","path","indexOf","delBasePath","substr","length","toRoute","replace","prepareRoute","fetchNextData","pathname","query","isServerRender","cb","attempts","getResponse","fetch","formatWithValidation","__NEXT_DATA__","buildId","credentials","then","res","ok","status","Error","json","data","catch","err","code","Router","constructor","as","initialProps","pageLoader","App","wrapApp","Component","subscription","isFallback","sdc","onPopState","e","state","changeState","getURL","isSsr","asPath","parse","url","_bps","options","console","warn","_getStaticData","Promise","resolve","_getServerData","route","components","props","__N_SSG","__N_SSP","events","isDynamicRoute","autoExport","sub","clc","_wrapApp","window","addEventListener","_rewriteUrlForNextExport","__NEXT_EXPORT_TRAILING_SLASH","rewriteUrlForNextExport","update","default","newData","assign","notify","reload","location","back","history","push","change","method","_url","_as","reject","_h","ST","performance","mark","nextExport","abortComponentLoad","onlyAHashChange","emit","scrollToHash","protocol","urlIsNew","shallow","asPathname","routeRegex","getRouteRegex","routeMatch","getRouteMatcher","missingParams","keys","groups","filter","param","join","getRouteInfo","routeInfo","error","cancelled","appComp","next","isPrerendered","getInitialProps","origGetInitialProps","set","cachedRouteInfo","handleError","loadErrorFail","href","fetchComponent","page","gipErr","isValidElementType","_getData","beforePopState","oldUrlNoHash","oldHash","split","newUrlNoHash","newHash","hash","scrollTo","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","prefetch","all","prefetchData","priority","cancel","componentResult","loadPage","fn","ctx","AppTree","loadGetInitialProps","router"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst utils_1 = require(\"../utils\");\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\nconst route_matcher_1 = require(\"./utils/route-matcher\");\nconst route_regex_1 = require(\"./utils/route-regex\");\nconst basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\nfunction addBasePath(path) {\n    return path.indexOf(basePath) !== 0 ? basePath + path : path;\n}\nexports.addBasePath = addBasePath;\nfunction delBasePath(path) {\n    return path.indexOf(basePath) === 0\n        ? path.substr(basePath.length) || '/'\n        : path;\n}\nfunction toRoute(path) {\n    return path.replace(/\\/$/, '') || '/';\n}\nconst prepareRoute = (path) => toRoute(!path || path === '/' ? '/index' : path);\nfunction fetchNextData(pathname, query, isServerRender, cb) {\n    let attempts = isServerRender ? 3 : 1;\n    function getResponse() {\n        return fetch(utils_1.formatWithValidation({\n            // @ts-ignore __NEXT_DATA__\n            pathname: `/_next/data/${__NEXT_DATA__.buildId}${pathname}.json`,\n            query,\n        }), {\n            // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n            // Cookies may also be required for `getServerSideProps`.\n            //\n            // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n            // > option.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n            //\n            // > For maximum browser compatibility when it comes to sending &\n            // > receiving cookies, always supply the `credentials: 'same-origin'`\n            // > option instead of relying on the default.\n            // https://github.com/github/fetch#caveats\n            credentials: 'same-origin',\n        }).then(res => {\n            if (!res.ok) {\n                if (--attempts > 0 && res.status >= 500) {\n                    return getResponse();\n                }\n                throw new Error(`Failed to load static props`);\n            }\n            return res.json();\n        });\n    }\n    return getResponse()\n        .then(data => {\n        return cb ? cb(data) : data;\n    })\n        .catch((err) => {\n        // We should only trigger a server-side transition if this was caused\n        // on a client-side transition. Otherwise, we'd get into an infinite\n        // loop.\n        if (!isServerRender) {\n            ;\n            err.code = 'PAGE_LOAD_ERROR';\n        }\n        throw err;\n    });\n}\nclass Router {\n    constructor(pathname, query, as, { initialProps, pageLoader, App, wrapApp, Component, err, subscription, isFallback, }) {\n        // Static Data Cache\n        this.sdc = {};\n        this.onPopState = (e) => {\n            if (!e.state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname, query } = this;\n                this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), utils_1.getURL());\n                return;\n            }\n            // Make sure we don't re-render on initial load,\n            // can be caused by navigating back from an external site\n            if (e.state &&\n                this.isSsr &&\n                e.state.as === this.asPath &&\n                url_1.parse(e.state.url).pathname === this.pathname) {\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (this._bps && !this._bps(e.state)) {\n                return;\n            }\n            const { url, as, options } = e.state;\n            if (process.env.NODE_ENV !== 'production') {\n                if (typeof url === 'undefined' || typeof as === 'undefined') {\n                    console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n                }\n            }\n            this.replace(url, as, options);\n        };\n        this._getStaticData = (asPath) => {\n            const pathname = prepareRoute(url_1.parse(asPath).pathname);\n            return process.env.NODE_ENV === 'production' && this.sdc[pathname]\n                ? Promise.resolve(this.sdc[pathname])\n                : fetchNextData(pathname, null, this.isSsr, data => (this.sdc[pathname] = data));\n        };\n        this._getServerData = (asPath) => {\n            let { pathname, query } = url_1.parse(asPath, true);\n            pathname = prepareRoute(pathname);\n            return fetchNextData(pathname, query, this.isSsr);\n        };\n        // represents the current component key\n        this.route = toRoute(pathname);\n        // set up the component cache (by route keys)\n        this.components = {};\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname !== '/_error') {\n            this.components[this.route] = {\n                Component,\n                props: initialProps,\n                err,\n                __N_SSG: initialProps && initialProps.__N_SSG,\n                __N_SSP: initialProps && initialProps.__N_SSP,\n            };\n        }\n        this.components['/_app'] = { Component: App };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        this.pathname = pathname;\n        this.query = query;\n        // if auto prerendered and dynamic route wait to update asPath\n        // until after mount to prevent hydration mismatch\n        this.asPath =\n            // @ts-ignore this is temporarily global (attached to window)\n            is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as;\n        this.basePath = basePath;\n        this.sub = subscription;\n        this.clc = null;\n        this._wrapApp = wrapApp;\n        // make sure to ignore extra popState in safari on navigating\n        // back from external site\n        this.isSsr = true;\n        this.isFallback = isFallback;\n        if (typeof window !== 'undefined') {\n            // in order for `e.state` to work on the `onpopstate` event\n            // we have to register the initial route upon initialization\n            this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), as);\n            window.addEventListener('popstate', this.onPopState);\n        }\n    }\n    // @deprecated backwards compatibility even though it's a private method.\n    static _rewriteUrlForNextExport(url) {\n        if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n            const rewriteUrlForNextExport = require('./rewrite-url-for-export')\n                .rewriteUrlForNextExport;\n            return rewriteUrlForNextExport(url);\n        }\n        else {\n            return url;\n        }\n    }\n    update(route, mod) {\n        const Component = mod.default || mod;\n        const data = this.components[route];\n        if (!data) {\n            throw new Error(`Cannot update unavailable route: ${route}`);\n        }\n        const newData = Object.assign(Object.assign({}, data), { Component, __N_SSG: mod.__N_SSG, __N_SSP: mod.__N_SSP });\n        this.components[route] = newData;\n        // pages/_app.js updated\n        if (route === '/_app') {\n            this.notify(this.components[this.route]);\n            return;\n        }\n        if (route === this.route) {\n            this.notify(newData);\n        }\n    }\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Go back in history\n     */\n    back() {\n        window.history.back();\n    }\n    /**\n     * Performs a `pushState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    push(url, as = url, options = {}) {\n        return this.change('pushState', url, as, options);\n    }\n    /**\n     * Performs a `replaceState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    replace(url, as = url, options = {}) {\n        return this.change('replaceState', url, as, options);\n    }\n    change(method, _url, _as, options) {\n        return new Promise((resolve, reject) => {\n            if (!options._h) {\n                this.isSsr = false;\n            }\n            // marking route changes as a navigation start entry\n            if (utils_1.ST) {\n                performance.mark('routeChange');\n            }\n            // If url and as provided as an object representation,\n            // we'll format them into the string version here.\n            let url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n            let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n            url = addBasePath(url);\n            as = addBasePath(as);\n            // Add the ending slash to the paths. So, we can serve the\n            // \"<page>/index.html\" directly for the SSR page.\n            if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n                const rewriteUrlForNextExport = require('./rewrite-url-for-export')\n                    .rewriteUrlForNextExport;\n                // @ts-ignore this is temporarily global (attached to window)\n                if (__NEXT_DATA__.nextExport) {\n                    as = rewriteUrlForNextExport(as);\n                }\n            }\n            this.abortComponentLoad(as);\n            // If the url change is only related to a hash change\n            // We should not proceed. We should only change the state.\n            // WARNING: `_h` is an internal option for handing Next.js client-side\n            // hydration. Your app should _never_ use this property. It may change at\n            // any time without notice.\n            if (!options._h && this.onlyAHashChange(as)) {\n                this.asPath = as;\n                Router.events.emit('hashChangeStart', as);\n                this.changeState(method, url, as, options);\n                this.scrollToHash(as);\n                Router.events.emit('hashChangeComplete', as);\n                return resolve(true);\n            }\n            const { pathname, query, protocol } = url_1.parse(url, true);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return resolve(false);\n            }\n            // If asked to change the current URL we should reload the current page\n            // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n            // We also need to set the method = replaceState always\n            // as this should not go into the history (That's how browsers work)\n            // We should compare the new asPath to the current asPath, not the url\n            if (!this.urlIsNew(as)) {\n                method = 'replaceState';\n            }\n            const route = toRoute(pathname);\n            const { shallow = false } = options;\n            if (is_dynamic_1.isDynamicRoute(route)) {\n                const { pathname: asPathname } = url_1.parse(as);\n                const routeRegex = route_regex_1.getRouteRegex(route);\n                const routeMatch = route_matcher_1.getRouteMatcher(routeRegex)(asPathname);\n                if (!routeMatch) {\n                    const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n                    if (missingParams.length > 0) {\n                        if (process.env.NODE_ENV !== 'production') {\n                            console.warn(`Mismatching \\`as\\` and \\`href\\` failed to manually provide ` +\n                                `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n                        }\n                        return reject(new Error(`The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` +\n                            `Read more: https://err.sh/zeit/next.js/incompatible-href-as`));\n                    }\n                }\n                else {\n                    // Merge params into `query`, overwriting any specified in search\n                    Object.assign(query, routeMatch);\n                }\n            }\n            Router.events.emit('routeChangeStart', as);\n            // If shallow is true and the route exists in the router cache we reuse the previous result\n            this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n                const { error } = routeInfo;\n                if (error && error.cancelled) {\n                    return resolve(false);\n                }\n                Router.events.emit('beforeHistoryChange', as);\n                this.changeState(method, url, as, options);\n                if (process.env.NODE_ENV !== 'production') {\n                    const appComp = this.components['/_app'].Component;\n                    window.next.isPrerendered =\n                        appComp.getInitialProps === appComp.origGetInitialProps &&\n                            !routeInfo.Component.getInitialProps;\n                }\n                this.set(route, pathname, query, as, routeInfo);\n                if (error) {\n                    Router.events.emit('routeChangeError', error, as);\n                    throw error;\n                }\n                Router.events.emit('routeChangeComplete', as);\n                return resolve(true);\n            }, reject);\n        });\n    }\n    changeState(method, url, as, options = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof window.history === 'undefined') {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            if (typeof window.history[method] === 'undefined') {\n                console.error(`Warning: window.history.${method} is not available`);\n                return;\n            }\n        }\n        if (method !== 'pushState' || utils_1.getURL() !== as) {\n            window.history[method]({\n                url,\n                as,\n                options,\n            }, \n            // Most browsers currently ignores this parameter, although they may use it in the future.\n            // Passing the empty string here should be safe against future changes to the method.\n            // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n            '', as);\n        }\n    }\n    getRouteInfo(route, pathname, query, as, shallow = false) {\n        const cachedRouteInfo = this.components[route];\n        // If there is a shallow route transition possible\n        // If the route is already rendered on the screen.\n        if (shallow && cachedRouteInfo && this.route === route) {\n            return Promise.resolve(cachedRouteInfo);\n        }\n        const handleError = (err, loadErrorFail) => {\n            return new Promise(resolve => {\n                if (err.code === 'PAGE_LOAD_ERROR' || loadErrorFail) {\n                    // If we can't load the page it could be one of following reasons\n                    //  1. Page doesn't exists\n                    //  2. Page does exist in a different zone\n                    //  3. Internal error while loading the page\n                    // So, doing a hard reload is the proper way to deal with this.\n                    window.location.href = as;\n                    // Changing the URL doesn't block executing the current code path.\n                    // So, we need to mark it as a cancelled error and stop the routing logic.\n                    err.cancelled = true;\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                if (err.cancelled) {\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                resolve(this.fetchComponent('/_error')\n                    .then(res => {\n                    const { page: Component } = res;\n                    const routeInfo = { Component, err };\n                    return new Promise(resolve => {\n                        this.getInitialProps(Component, {\n                            err,\n                            pathname,\n                            query,\n                        }).then(props => {\n                            routeInfo.props = props;\n                            routeInfo.error = err;\n                            resolve(routeInfo);\n                        }, gipErr => {\n                            console.error('Error in error page `getInitialProps`: ', gipErr);\n                            routeInfo.error = err;\n                            routeInfo.props = {};\n                            resolve(routeInfo);\n                        });\n                    });\n                })\n                    .catch(err => handleError(err, true)));\n            });\n        };\n        return new Promise((resolve, reject) => {\n            if (cachedRouteInfo) {\n                return resolve(cachedRouteInfo);\n            }\n            this.fetchComponent(route).then(res => resolve({\n                Component: res.page,\n                __N_SSG: res.mod.__N_SSG,\n                __N_SSP: res.mod.__N_SSP,\n            }), reject);\n        })\n            .then((routeInfo) => {\n            const { Component, __N_SSG, __N_SSP } = routeInfo;\n            if (process.env.NODE_ENV !== 'production') {\n                const { isValidElementType } = require('react-is');\n                if (!isValidElementType(Component)) {\n                    throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n                }\n            }\n            return this._getData(() => __N_SSG\n                ? this._getStaticData(as)\n                : __N_SSP\n                    ? this._getServerData(as)\n                    : this.getInitialProps(Component, \n                    // we provide AppTree later so this needs to be `any`\n                    {\n                        pathname,\n                        query,\n                        asPath: as,\n                    })).then(props => {\n                routeInfo.props = props;\n                this.components[route] = routeInfo;\n                return routeInfo;\n            });\n        })\n            .catch(handleError);\n    }\n    set(route, pathname, query, as, data) {\n        this.isFallback = false;\n        this.route = route;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.notify(data);\n    }\n    /**\n     * Callback to execute before replacing router state\n     * @param cb callback to be executed\n     */\n    beforePopState(cb) {\n        this._bps = cb;\n    }\n    onlyAHashChange(as) {\n        if (!this.asPath)\n            return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n        const [newUrlNoHash, newHash] = as.split('#');\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as) {\n        const [, hash] = as.split('#');\n        // Scroll to top if the hash is just `#` with no value\n        if (hash === '') {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // First we check if the element by id is found\n        const idEl = document.getElementById(hash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(hash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        return this.asPath !== asPath;\n    }\n    /**\n     * Prefetch page code, you may wait for the data during page rendering.\n     * This feature only works in production!\n     * @param url the href of prefetched page\n     * @param asPath the as path of the prefetched page\n     */\n    prefetch(url, asPath = url, options = {}) {\n        return new Promise((resolve, reject) => {\n            const { pathname, protocol } = url_1.parse(url);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return;\n            }\n            // Prefetch is not supported in development mode because it would trigger on-demand-entries\n            if (process.env.NODE_ENV !== 'production') {\n                return;\n            }\n            const route = delBasePath(toRoute(pathname));\n            Promise.all([\n                this.pageLoader.prefetchData(url, delBasePath(asPath)),\n                this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route),\n            ]).then(() => resolve(), reject);\n        });\n    }\n    async fetchComponent(route) {\n        let cancelled = false;\n        const cancel = (this.clc = () => {\n            cancelled = true;\n        });\n        route = delBasePath(route);\n        const componentResult = await this.pageLoader.loadPage(route);\n        if (cancelled) {\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\n            error.cancelled = true;\n            throw error;\n        }\n        if (cancel === this.clc) {\n            this.clc = null;\n        }\n        return componentResult;\n    }\n    _getData(fn) {\n        let cancelled = false;\n        const cancel = () => {\n            cancelled = true;\n        };\n        this.clc = cancel;\n        return fn().then(data => {\n            if (cancel === this.clc) {\n                this.clc = null;\n            }\n            if (cancelled) {\n                const err = new Error('Loading initial props cancelled');\n                err.cancelled = true;\n                throw err;\n            }\n            return data;\n        });\n    }\n    getInitialProps(Component, ctx) {\n        const { Component: App } = this.components['/_app'];\n        const AppTree = this._wrapApp(App);\n        ctx.AppTree = AppTree;\n        return utils_1.loadGetInitialProps(App, {\n            AppTree,\n            Component,\n            router: this,\n            ctx,\n        });\n    }\n    abortComponentLoad(as) {\n        if (this.clc) {\n            const e = new Error('Route Cancelled');\n            e.cancelled = true;\n            Router.events.emit('routeChangeError', e, as);\n            this.clc();\n            this.clc = null;\n        }\n    }\n    notify(data) {\n        this.sub(data, this.components['/_app'].Component);\n    }\n}\nexports.default = Router;\nRouter.events = mitt_1.default();\n"]},"metadata":{},"sourceType":"script"}